global:
  deployment:
    spire: false
    credentialsOperator: true
    intentsOperator: true
    networkMapper: true

  aws:
    enabled: false
    rolesAnywhere:
      enabled: false
    useSoftDelete: false
    eksClusterNameOverride:

  azure:
    enabled: false
    userAssignedIdentityID:
    subscriptionID:
    resourceGroup:
    aksClusterName:

  # Extra annotations for deployed pods
  podAnnotations: {}
  # Extra labels for deployed pods
  podLabels: {}
  # Labels to add to all deployed objects
  commonLabels: {}
  # Annotations to add to all deployed objects
  commonAnnotations: {}

  # Specify an annotation name that by setting it, one can override otterize's workload name resolution.
  workloadNameOverrideAnnotationName: intents.otterize.com/workload-name
  # DEPRECATED: use `workloadNameOverrideAnnotationName` instead
  serviceNameOverrideAnnotationName:

  # Provider for credentials-operator to use (spire/otterize-cloud/cert-manager), if empty - spire is used by default
  certificateProvider:

  # The CIDR prefix length of the control plane's IPv4 address, used to match workloads to the control plane.
  # For GKE users, it's recommended to set this to 28, as suggested in the networking best practices: https://cloud.google.com/kubernetes-engine/docs/best-practices/networking
  controlPlaneIPv4CIDRPrefixLength:

  openshift: false

  kubebuilder_rbac_proxy:
    image: otterize/kubebuilder-kube-rbac-proxy
    tag: v0.11.0
  otterizeCloud:
    useCloudToGenerateTLSCredentials: # Deprecated, use `certificateProvider=otterize-cloud` instead
    credentials:
      # fill clientId and clientSecret in order to connect to Otterize Cloud
      clientId:
      clientSecret:
    # (optional) The name of a secret containing a single `CA.pem` file for an extra root CA used to connect to Otterize Cloud.
    # The secret should be placed in the same namespace as the Otterize deployment
    apiExtraCAPEMSecret:
  spire:
    serverServiceName: spire-server
  # If defined overrides `allowGetAllResources`
  allowGetAllResources:
  spiffe:
    trustDomain: "example.org"
    CASubject:
      country: "US"
      organization: "SPIRE"

  # Global telemetry configuration
  telemetry:
    enabled: true
    usage:
      enabled: true
    errors:
      enabled: true
      endpointAddress: "https://app.otterize.com/api/errors"
      stage:
      networkMapperApiKey: d86195588a41fa03aa6711993bb1c765
      intentsOperatorApiKey: 60a78208a2b4fe714ef9fb3d3fdc0714
      credentialsOperatorApiKey: 20b1b74678347375fedfdba65171acb2

# alias for intents-operator values
intentsOperator:
  operator:
    mode: defaultActive
    autoGenerateTLSUsingCredentialsOperator: true
    enableNetworkPolicyCreation: true
    enableKafkaACLCreation: true
    automateThirdPartyNetworkPolicies: ifBlockedByOtterize
    automateAllowWebhookTraffic: ifBlockedByOtterize
    enableIstioPolicyCreation: true
  watchedNamespaces: null # by default, watch all

# alias for spire values
spire: {}

# alias for credentials-operator values
credentialsOperator: {}

# alias for network-mapper values
networkMapper:
  mapper: {}
  sniffer: {}
  kafkawatcher: {}
  istiowatcher: {}