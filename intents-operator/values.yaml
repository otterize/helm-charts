operator:
  repository: otterize
  image: intents-operator
  pullPolicy:

  autoGenerateTLSUsingCredentialsOperator: false

  mode: defaultActive # or defaultShadow
  # **Deprecated, use mode instead** `enableEnforcement` controls all the enforcement that the intents-operator performs. When set to false, enforcement
  # is disabled globally (both for network policies and Kafka ACL). When set to true, you may use the other flags for
  # more granular enforcement settings (e.g. disable only kafka ACL)
  enableEnforcement: # true or false - by default empty, deprecated use mode instead.
  # `mode` controls the mode of operation for the intents-operator. When set to `defaultActive`, enforcement will be enabled by default.
  # When set to `defaultShadow`, enforcement will be disabled by default, and can be enabled per-service using `ProtectedService` resources.
  # In either case, you can also use the other flags that control network policy creation, etc, to disable enforcement for a specific
  enableNetworkPolicyCreation: true
  enableKafkaACLCreation: true
  # **Deprecated, use allowExternalTraffic instead**
  autoCreateNetworkPoliciesForExternalTraffic: # deprecated, use allowExternalTraffic instead
  # **Deprecated, use allowExternalTraffic instead**
  autoCreateNetworkPoliciesForExternalTrafficDisableIntentsRequirement: # deprecated, use allowExternalTraffic instead

  # `allowExternalTraffic` controls whether the intents-operator will automatically create network policies for services
  # that are accessible to external traffic.
  # Possible values are:
  # - `ifBlockedByOtterize` (default) - only create network policies for services that are protected by otterize
  # - `off`                           - never create network policies for external traffic. If server is protected by
  #                                     otterize and meant to be accessible from outside the cluster, it may need a
  #                                     manually created network policy to allow external traffic
  # - `always`                        - create network policies for every service that is accessible from outside the
  #                                     cluster, regardless of whether it is protected by otterize or not
  allowExternalTraffic: ifBlockedByOtterize
  enableIstioPolicyCreation: true
  enableDatabasePolicyCreation: true
  enableEgressNetworkPolicyCreation: false

  resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

aws:
  roleARN:

# allowGetAllResources gives get permission to watch on all resources. If disabled, the operator will only
# be able to resolve pods up to their built-in owners. For example, a Pod is owned by a ReplicaSet that is owned by a Deployment.
# If that Deployment is owned by a custom resource, the operator will not be able to resolve it.
# For this resolving to be successful, the operator needs to be able to `get` all resources.
allowGetAllResources: true
watchedNamespaces: null # by default, watch all
enforcedNamespaces: null # by default, when mode is defaultActive, enforce in all namespaces, when mode is defaultShadow, enforce in none
global:
  deployment:
    credentialsOperator: true
    spire: false
    intentsOperator: true
    networkMapper: true

  aws:
    enabled: false
    rolesAnywhere:
      enabled: false
    eksClusterNameOverride:

  azure:
    enabled: false
    userAssignedIdentityID:
    subscriptionID:
    resourceGroup:
    aksClusterName:

  gcp:
    enabled: false

  # Extra annotations for deployed pods
  podAnnotations: {}
  # Extra labels for deployed pods
  podLabels: {}
  # Labels to add to all deployed objects
  commonLabels: {}
  # Annotations to add to all deployed objects
  commonAnnotations: {}

  # Specify an annotation name that by setting it, one can override otterize's service name resolution.
  serviceNameOverrideAnnotationName: intents.otterize.com/service-name

  kubebuilder_rbac_proxy:
    image: otterize/kubebuilder-kube-rbac-proxy
    tag: v0.11.0
  telemetry:
    enabled:
    usage:
      enabled:
    errors:
      enabled:
      stage:
      endpointAddress:
      intentsOperatorApiKey: 60a78208a2b4fe714ef9fb3d3fdc0714

  # If defined overrides `allowGetAllResources`
  allowGetAllResources:
  otterizeCloud:
    credentials:
      # fill clientId and clientSecret in order to connect to Otterize Cloud
      clientId:
      clientSecret:
      # if specified, uses this Kubernetes SecretKeyRef instead of creating a secret with the value of clientSecret.
      clientSecretKeyRef:
        secretName:
        secretKey:
    # (optional) The name of a secret containing a single `CA.pem` file for an extra root CA used to connect to Otterize Cloud.
    # The secret should be placed in the same namespace as the Otterize deployment
    apiExtraCAPEMSecret:
