operator:
  repository: otterize
  image: intents-operator
  tag: latest
  pullPolicy:

  autoGenerateTLSUsingCredentialsOperator: false

  # `enableEnforcement` controls all the enforcement that the intents-operator performs. When set to false, enforcement
  # is disabled globally (both for network policies and Kafka ACL). When set to true, you may use the other flags for
  # more granular enforcement settings (e.g. disable only kafka ACL)
  enableEnforcement: true
  enableNetworkPolicyCreation: true
  enableKafkaACLCreation: true
  autoCreateNetworkPoliciesForExternalTraffic: true

  resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

watcher:
  repository: otterize
  image: intents-operator-pod-watcher
  tag: latest
  pullPolicy:

  resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# allowGetAllResources gives get permission to watch on all resources. If disabled, the operator will only
# be able to resolve pods up to their built-in owners. For example, a Pod is owned by a ReplicaSet that is owned by a Deployment.
# If that Deployment is owned by a custom resource, the operator will not be able to resolve it.
# For this resolving to be successful, the operator needs to be able to `get` all resources.
allowGetAllResources: true
watchedNamespaces: null # by default, watch all
global:
  # If defined overrides `allowGetAllResources`
  allowGetAllResources:
  otterizeCloud:
    credentials:
      # fill clientId and clientSecret in order to connect to Otterize Cloud
      clientId:
      clientSecret:
    # (optional) The name of a secret containing a single `CA.pem` file for an extra root CA used to connect to Otterize Cloud.
    # The secret should be placed in the same namespace as the Otterize deployment
    apiExtraCAPEMSecret: