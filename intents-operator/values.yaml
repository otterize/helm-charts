operator:
  repository: otterize
  image: intents-operator
  priorityClassName:
  pullPolicy:
  podSecurityContext:
    fsGroup: 65532
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsGroup: 65532
    runAsUser: 65532
    runAsNonRoot: true
    capabilities:
      drop:
        - "ALL"
  pullSecrets:
  hostNetwork: false
  metricsPort: 2112
  autoGenerateTLSUsingCredentialsOperator: false

  mode: defaultActive # or defaultShadow
  # **Deprecated, use mode instead** `enableEnforcement` controls all the enforcement that the intents-operator performs. When set to false, enforcement
  # is disabled globally (both for network policies and Kafka ACL). When set to true, you may use the other flags for
  # more granular enforcement settings (e.g. disable only kafka ACL)
  enableEnforcement: # true or false - by default empty, deprecated use mode instead.
  # `mode` controls the mode of operation for the intents-operator. When set to `defaultActive`, enforcement will be enabled by default.
  # When set to `defaultShadow`, enforcement will be disabled by default, and can be enabled per-service using `ProtectedService` resources.
  # In either case, you can also use the other flags that control network policy creation, etc, to disable enforcement for a specific
  enableNetworkPolicyCreation: true
  enableKafkaACLCreation: true
  # **Deprecated, use automateThirdPartyNetworkPolicies instead**
  autoCreateNetworkPoliciesForExternalTraffic: # deprecated, use automateThirdPartyNetworkPolicies instead
  # **Deprecated, use automateThirdPartyNetworkPolicies instead**
  autoCreateNetworkPoliciesForExternalTrafficDisableIntentsRequirement: # deprecated, use automateThirdPartyNetworkPolicies instead
  ingressControllerConfigs: # ingressControllerConfigs determines whether network policies created by automateThirdPartyNetworkPolicies will be limited to just these pods, or all pods in the namespace
#    - name: ingress-nginx-controller
#      namespace: ingress-nginx
#      kind: Deployment

  prometheusServerConfigs: # Restricts the automatically created network policies for Prometheus metrics scraping to only originate from Prometheus server
  #    - name: prometheus-server
  #      namespace: prometheus
  #      kind: Deployment

  # `externallyManagedPolicyWorkloads` allows configuring workloads assumed to have externally managed network policies, allowing traffic to/from them.
  # Otterize Cloud will not suggest new ClientIntents for these workloads.
  externallyManagedPolicyWorkloads:
  #    - name: datadog
  #      namespace: infrastructure
  #      kind: Deployment

  # **Deprecated, use automateThirdPartyNetworkPolicies instead**
  allowExternalTraffic:

  # `automateThirdPartyNetworkPolicies` Automatically creates network policies to allow required traffic from load
  # balancers, reverse proxies and Prometheus by tracking Service and Ingress resources, as well as Prometheus scrape annotations.
  #
  # Possible values are:
  # - `ifBlockedByOtterize` (default) - only create network policies for services that are protected by otterize
  # - `off`                           - never create network policies. If server is protected by
  #                                     otterize and meant to be accessible from outside the cluster \ by Prometheus, it
  #                                     may need a manually created network policy to allow the traffic
  # - `always`                        - create network policies for every relevant service, regardless of whether it is protected
  #                                     by otterize or not
  # To enable Prometheus metrics scraping traffic, `prometheusServerConfigs` must be set as well
  automateThirdPartyNetworkPolicies: ifBlockedByOtterize
  # `autoAllowWebhookTraffic` Automatically creates network policies to allow required traffic for a webhook workload.
  #
  # Possible values are:
  # - `ifBlockedByOtterize` (default) - only create network policies for services that are protected by otterize
  # - `off`                           - never create network policies. If server is protected by
  #                                     otterize and meant to be accessible for a webhook, it may need a manually
  #                                     created network policy to allow the traffic
  # - `always`                        - create network policies to all webhooks' workloads. Note that if the same workload
  #                                     is used for more than just webhook (e.g. serve as rest-api server, expose metrics etc.)
  #                                     it may need a manually created network policy to allow the other types of traffic
  #
  automateAllowWebhookTraffic: ifBlockedByOtterize
  # Indicates whether we need to limit the ingress traffic for webhook services only to the control-plane or to allow all
  webhookTrafficLimitToControlPlane: false
  enableIstioPolicyCreation: true
  enableDatabasePolicyCreation: true
  enableLinkerdPolicyCreation: true

  # If set to true, the operator will create network policies for egress traffic.
  enableEgressNetworkPolicyCreation: false

  # If set to true, the operator will create separate network policies for ingress and egress traffic.
  # (Only available with enableEgressNetworkPolicyCreation set to true)
  separateNetpolsForIngressAndEgress: false

  # If set to true, the operator will try to consolidate IPs into /24 networks when creating egress network policies to the internet.
  enableGroupIPsByCIDR: false

  ingressControllerAWSALBExempt: false
  extraEnvVars:

  affinity: {}
  tolerations: []

  resources: { }
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

webhookServer:
  repository: otterize
  image: intents-operator-webhook-server
  priorityClassName:
  pullPolicy:
  podSecurityContext:
    fsGroup: 65532
    runAsGroup: 65532
    runAsNonRoot: true
    runAsUser: 65532
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsGroup: 65532
    runAsUser: 65532
    runAsNonRoot: true
    capabilities:
      drop:
        - "ALL"
  pullSecrets:
  hostNetwork: false
  metricsPort: 2112

aws:
  roleARN:

# allowGetAllResources gives get permission to watch on all resources. If disabled, the operator will only
# be able to resolve pods up to their built-in owners. For example, a Pod is owned by a ReplicaSet that is owned by a Deployment.
# If that Deployment is owned by a custom resource, the operator will not be able to resolve it.
# For this resolving to be successful, the operator needs to be able to `get` all resources.
allowGetAllResources: true
watchedNamespaces: null # by default, watch all
enforcedNamespaces: null # by default, when mode is defaultActive, enforce in all namespaces, when mode is defaultShadow, enforce in none
global:
  deployment:
    credentialsOperator: true
    spire: false
    intentsOperator: true
    networkMapper: true

  aws:
    enabled: false
    rolesAnywhere:
      enabled: false
    eksClusterNameOverride:

  azure:
    enabled: false
    userAssignedIdentityID:
    subscriptionID:
    resourceGroup:
    aksClusterName:

  gcp:
    enabled: false

  # Extra annotations for deployed pods
  podAnnotations: {}
  # Extra labels for deployed pods
  podLabels: {}
  # Labels to add to all deployed objects
  commonLabels: {}
  # Annotations to add to all deployed objects
  commonAnnotations: {}

  # Specify an annotation name that by setting it, one can override otterize's workload name resolution.
  workloadNameOverrideAnnotationName: intents.otterize.com/workload-name

  # DEPRECATED: use `workloadNameOverrideAnnotationName` instead
  serviceNameOverrideAnnotationName:

  experimentalUseDockerImageAsServiceNameForJobs: false

  openshift: false

  # The CIDR prefix length of the IPv4 address of the control plane. Used when we want to match workloads to the control plane.
  # If you are using GKE, you might want to consider setting it to 28, as mentions here: https://cloud.google.com/kubernetes-engine/docs/best-practices/networking
  controlPlaneIPv4CIDRPrefixLength:

  kubebuilder_rbac_proxy:
    image: otterize/kubebuilder-kube-rbac-proxy
    tag: v0.11.0
  telemetry:
    enabled:
    usage:
      enabled:
    errors:
      enabled:
      stage:
      endpointAddress:
      intentsOperatorApiKey: 60a78208a2b4fe714ef9fb3d3fdc0714

  # If defined overrides `allowGetAllResources`
  allowGetAllResources:
  otterizeCloud:
    credentials:
      # fill clientId and clientSecret in order to connect to Otterize Cloud
      clientId:
      clientSecret:
      # if specified, uses this Kubernetes SecretKeyRef instead of creating a secret with the value of clientSecret.
      clientSecretKeyRef:
        secretName:
        secretKey:
        clientIdKey:  # (optional) specify client ID as additional key in the same secret
    # (optional) The name of a secret containing a single `CA.pem` file for an extra root CA used to connect to Otterize Cloud.
    # The secret should be placed in the same namespace as the Otterize deployment
    apiExtraCAPEMSecret:
